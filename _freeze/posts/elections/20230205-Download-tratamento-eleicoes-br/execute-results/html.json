{
  "hash": "8456c10096fb9eba440a4f9ae33c08f1",
  "result": {
    "markdown": "---\ntitle: \"Download e tratamento de dados das eleições brasileiras usando R\"\nauthor: \"Artur Quirino\"\ndate: \"2023-02-06\"\ndate-modified: \"2023-02-07\"\nexecute: \n  eval: FALSE\n---\n\n\nNesta postagem, eu descrevo uma abordagem para *download*, leitura e tratamento de dados das eleições \nbrasileiras no `R`, em poucas linhas de código. A atividade é desenvolvida com \ndados do perfil do eleitorado, detalhes da  votação por seção e votação nominal\npor zona.\n\n# Download e leitura dos dados\n\nHá duas formas para o download e leitura das tabelas de dados do TSE no `R`. \nA primeira, querer a identificação e manuseio do link de cada tabela; a segunda, \nbaseia-se nas funções do pacote `electionsBR`. A primeira opção é mais rápida, \na segunda é mais simples. \n\nNo exemplo a seguir, eu faço o download das tabelas das eleições gerais \nestaduais de 2022, manualmente. O objeto `files` armazena o nome e o local onde \ncada arquivo foi salvo.\n\n## Download\n\n::: {.cell}\n\n```{.r .cell-code}\nremotes::install_github(\"arturhgq/dtools\")\n\n# Lista de links\nurls = list(\n  eleitorado2022 = paste0(\"https://cdn.tse.jus.br/estatistica/sead/odsele/perfil_eleitorado/perfil_eleitorado_2022.zip\"),\n  votacao_detalhes_secao2022 = paste0(\"https://cdn.tse.jus.br/estatistica/sead/odsele/detalhe_votacao_secao/detalhe_votacao_secao_2022.zip\"),\n  votacao_nominal_zona2022 = paste0(\"https://cdn.tse.jus.br/estatistica/sead/odsele/votacao_candidato_munzona/votacao_candidato_munzona_2022.zip\")\n)\n\n# Download dos arquivos\nfiles = dtools::download.files(urls)\n```\n:::\n\n\n## Leitura\n\nDe posse do vetor com o caminho absoluto de cada arquivo, o fragmento de código\nabaixo é suficiente para ler todas as tabelas de uma vez. Na segunda aba, eu\nofereço uma alternativa, com o pacote `electionsBR`.\n\n::: {.panel-tabset}\n\n## R base\n\n::: {.cell}\n\n```{.r .cell-code}\n# Não rode o código se o computador tiver até 8gb de RAM.\ndata = mapply(\n  dtools::read_delim_zip, \n  x = files, \n  pattern = c(\".csv$\", \"BRASIL.csv$\", \"BRASIL.csv$\"),\n  SIMPLIFY = FALSE\n)\n```\n:::\n\n\n## electionsBR\n\n\n::: {.cell}\n\n```{.r .cell-code}\nremotes::install_github(\"silvadenisson/electionsBR\")\n\nyear = 2022\n\nvoter_profile = electionsBR::voter_profile(year)\ndetails_mun_zone_fed = electionsBR::details_mun_zone_fed(year, br_archive = TRUE)\nvote_mun_zone_fed = electionsBR::vote_mun_zone_fed(year, br_archive = TRUE)\n```\n:::\n\n\n:::\n\nEm detalhes, `mapply` aplica à função `read_delim_zip` dois parâmetros: `x` e `pattern`.\nEm x, atribui-se o caminho absoluto dos três arquivos de interesse - \"eleitorado2022\", \n\"votacao_detalhes_secao2022\" e \"votacao_nominal_zona2022.\" Em `pattern`, define-se, via `regex`,\no padrão de arquivos que deverá ser descompactado e lido para cada `x`. Quanto mais \ndetalhado for o padrão definido, menores serão os gastos com tempo e com memória RAM. \n\nVejamos, por exemplo, o arquivo \"votacao_nominal_zona2022\". Internamente, ele contém 29 \ntabelas em `.csv` e um documento em `.pdf`. Portanto, caso fosse atribuido a\n`pattern` apenas o valor `'.csv$'`, a função `read_delim_zip` leria e descompactaria \n29 tabelas. O padrão `'BRASIL.csv'$`, em contraste, seleciona apenas a tabela de interesse,\nque contém os dados de votacao nominal, a nível de município e zona eleitoral,\ndos 26 estados, do Distrito Federal e dos eleitores que votaram no exterior.\n\n### Abordagem de leitura de dados para redução de gasto de memória RAM\n\nCertamente, se você não usa um supercomputador, carregar milhares de linhas de\ndados na memória do seu computador será sempre um desafio. No exemplo acima, eu\nconsumi 9,14 GB de memória RAM para carregar 16.818.896 linhas de dados \ndistribuídas em 95 colunas. \n\nUma opção para tornar viável a leitura de grandes volumes de dados sem estourar a memória \nRAM de sua máquina é carregar uma tabela de cada vez, tratar os dados da tabela carregada \ne somente então ler o próximo arquivo, reescrevendo o anterior. \nEm casos extremos, você pode particionar as tabelas ou selecionar colunas antes de \ncarregá-las. Feito dessa forma, você poupará tempo e memória RAM. \n\n## Tratamento dos dados\n\nNesta seção, eu aplico as sugestões que propus no tópico anterior e faço \naté três operações em cada uma das tabelas: *subset*, agrupamento e soma. Para reduzir\no consumo de tempo das operações, optei pelo pacote `data.table` ao em vez do amigável `dplyr`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Lista de parâmetros usados nas operações\nparams = list(\n    by_eleitorado2022 = c(\n    \"SG_UF\", \"CD_MUNICIPIO\", \"NM_MUNICIPIO\", \"DS_GENERO\", \"DS_FAIXA_ETARIA\", \n    \"DS_GRAU_ESCOLARIDADE\", \"ANO_ELEICAO\"\n  ),\n  vars_eleirado2022 = c(\n    \"QT_ELEITORES_PERFIL\", \"QT_ELEITORES_BIOMETRIA\"\n  ),\n  by_detalhes_votacao2022 = c(\n    \"DS_CARGO\", \"NR_TURNO\", \"SG_UF\", \"SG_UE\", \"NM_MUNICIPIO\", \"CD_MUNICIPIO\",\n    \"ANO_ELEICAO\"\n  ),\n  vars_detalhes_votacao2022 = c(\n    \"QT_APTOS\", \"QT_COMPARECIMENTO\",\"QT_ABSTENCOES\", \"QT_VOTOS_BRANCOS\",\n    \"QT_VOTOS_NULOS\", \"QT_VOTOS_NOMINAIS\", \"QT_VOTOS_LEGENDA\"\n  ),\n    by_votacao2022 = c(\n    \"NR_TURNO\", \"SG_UF\", \"NM_MUNICIPIO\", \"CD_MUNICIPIO\", \"NR_CANDIDATO\",\n    \"NM_CANDIDATO\", \"NR_PARTIDO\", \"SG_PARTIDO\", \"NM_PARTIDO\", \"ANO_ELEICAO\"\n  ),\n  vars_votacao2022 = c(\n    \"QT_VOTOS_NOMINAIS\"\n  )\n)\n```\n:::\n\n\n### Perfil do eleitorado brasileiro (2022)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Define as variáveis que serão carregadas\nselect = c(params$by_eleitorado2022, params$vars_eleirado2022)\n\n## Leitura dos dados\ndata = dtools::read_delim_zip(\n  files$eleitorado2022,\n  pattern = \".csv\",\n  col_select = select\n)\n\n## Tratamento dos dados\neleitorado_mun2022 = data.table::setDT(data)[\n    , # seleciona todas as linhas\n    lapply(.SD, sum), # soma todas as colunas contidas em .SD\n    by = eval(params$by_eleitorado2022), # define o agrupamento\n    .SDcols = params$vars_eleirado2022 # define quais colunas de .SD\n  ] \n```\n:::\n\n\n### Detalhes da votação por município e zona eleitoral (2022)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Define as variáveis que serão carregadas\nselect = c(\n  params$by_detalhes_votacao2022, \n  params$vars_detalhes_votacao2022, \n  \"DS_CARGO\"\n)\n\n## Leitura dos dados\ndata = dtools::read_delim_zip(\n  files$votacao_detalhes_secao2022,\n  pattern = \"BRASIL.csv\",\n  col_select = select\n)\n\n## Tratamento dos dados\nvotacao_mun_detalhes2022 = data.table::setDT(data)[\n    DS_CARGO == \"PRESIDENTE\",\n    lapply(.SD, sum), \n    by = eval(params$by_detalhes_votacao2022),\n    .SDcols = params$vars_votacao2022\n  ] \n```\n:::\n\n\n### Votação nominal por município e zona eleitoral\n\n::: {.cell}\n\n```{.r .cell-code}\n## Define as variáveis que serão carregadas\nselect = c(\n  params$by_votacao2022,\n  params$vars_votacao2022, \n  \"DS_CARGO\"\n)\n\n## Leitura dos dados\ndata = dtools::read_delim_zip(\n  files$votacao_nominal_zona2022,\n  pattern = \"BRASIL.csv\",\n  col_select = select\n)\n\n## Tratamento dos dados\nvotacao_mun2022 = data.table::setDT(data)[\n    DS_CARGO == \"Presidente\",\n    lapply(.SD, sum), \n    by = eval(params$by_votacao2022),\n    .SDcols = params$vars_votacao2022\n  ] \n```\n:::\n\n\n\n\n### Limpeza do ambiente global e memória\n\nComo resultado da abordagem proposta, o total de memória gasta diminuiu de 9,14 GB para 1,29 GB. \nPara reduzir ainda mais o consumo de memória, basta excluir a última tabela carregada no ambiente global e resetar a sessão do R. Este processo gerou uma nova redução no consumo de memória de 932 mb. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nrm(data) # exclui a base original\n.rs.restartR() # reinicia a sessão do R, mas mantém os objetos salvos no \"Global Environment\"\n```\n:::\n\n\n## Exportando os resultados\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Lista com as tabelas tratadas\ndata = list(\n  eleitorado_mun2022, \n  votacao_mun_detalhes2022, \n  votacao_mun2022\n)\n\n## Nome dos arquivos que serão exportados\nnames = c(\n  \"eleitorado_mun2022.csv\", \n  \"mun_votacao_detalhes_secao2022.csv\",\n  \"mun_votacao2022.csv\"\n)\n\ninvisible(\n  mapply(\n    vroom::vroom_write, \n    x = data, \n    file = here::here(names)\n  )\n) \n```\n:::\n",
    "supporting": [
      "20230205-Download-tratamento-eleicoes-br_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}